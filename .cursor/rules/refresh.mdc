---
description: When User is asking for a solution of present problem.
globs: 
alwaysApply: false
---
User Query: [The specific problem description will be provided when this template is referenced]

---

Based on the persistent user query detailed above the `---` separator, a previous attempt likely failed to resolve the issue. **Discard previous assumptions about the root cause.** We must now perform a **systematic re-diagnosis** by following these steps, adhering strictly to your core operating principles (`core.md`/`.cursorrules`/User Rules):

1.  **Step Back & Re-Scope:** Forget the specifics of the last failed attempt. Broaden your focus. Identify the *core functionality* or *system component(s)* involved in the user's reported problem (e.g., authentication flow, data processing pipeline, specific UI component interaction, infrastructure resource provisioning).
2.  **Map the Relevant System Structure:** Use tools (`list_dir`, `file_search`, `codebase_search`, `read_file` on config/entry points) to **map out the high-level structure and key interaction points** of the identified component(s). Understand how data flows, where configurations are loaded, and what dependencies exist (internal and external). Gain a "pyramid view" â€“ see the overall architecture first.
3.  **Hypothesize Potential Root Causes (Broadly):** Based on the system map and the problem description, generate a *broad* list of potential areas where the root cause might lie (e.g., configuration error, incorrect API call, upstream data issue, logic flaw in module X, dependency conflict, infrastructure misconfiguration, incorrect permissions).
4.  **Systematic Investigation & Evidence Gathering:** **Prioritize and investigate** the most likely hypotheses from step 3 using targeted tool usage.
    *   **Validate Configurations:** Use `read_file` to check *all* relevant configuration files associated with the affected component(s).
    *   **Trace Execution Flow:** Use `grep_search` or `codebase_search` to trace the execution path related to the failing functionality. Add temporary, descriptive logging via `edit_file` if necessary and safe (request approval if unsure/risky) to pinpoint failure points.
    *   **Check Dependencies & External Interactions:** Verify versions and statuses of dependencies. If external systems are involved, use safe commands (`run_terminal_cmd` with `require_user_approval=true` if needed for diagnostics like `curl` or status checks) to assess their state.
    *   **Examine Logs:** If logs are accessible and relevant, guide me on how to retrieve them or use tools (`read_file` if they are simple files) to analyze recent entries related to the failure.
5.  **Identify the Confirmed Root Cause:** Based *only* on the evidence gathered through tool-based investigation, pinpoint the **specific, confirmed root cause**. Do not guess. If investigation is inconclusive, report findings and suggest the next most logical diagnostic step.
6.  **Propose a Targeted Solution:** Once the root cause is *confirmed*, propose a precise fix that directly addresses it. Explain *why* this fix targets the identified root cause.
7.  **Plan Comprehensive Verification:** Outline how you will verify that the proposed fix *resolves the original issue* AND *does not introduce regressions*. This verification must cover the relevant positive, negative, and edge cases as applicable to the fixed component.
8.  **Execute & Verify:** Implement the fix (using `edit_file` or `run_terminal_cmd` with appropriate safety approvals) and **execute the comprehensive verification plan**.
9.  **Report Outcome:** Succinctly report the identified root cause, the fix applied, and the results of your comprehensive verification, confirming the issue is resolved.

**Proceed methodically through these diagnostic steps.** Do not jump to proposing a fix until the root cause is confidently identified through investigation.